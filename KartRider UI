{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [
        "ZbziGbFULJOf",
        "OktrJ1ITVG7M",
        "YFPUDZB7VG7N",
        "f3r9TIMCVMcL",
        "UZfp2li8VMcO",
        "h2csZDx4VMcP"
      ],
      "toc_visible": true,
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/uxpstudio/Navigation/blob/master/KartRider%20UI\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "id": "ghyjDJiGlSn0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 무경험자의 반응"
      ],
      "metadata": {
        "id": "ZbziGbFULJOf"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##전처리"
      ],
      "metadata": {
        "id": "AYCNepSYJ4M0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd"
      ],
      "metadata": {
        "id": "77Or2I067u3u"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data = pd.read_csv('/content/drive/MyDrive/a.csv')"
      ],
      "metadata": {
        "id": "cDVW2-m0J4NG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data"
      ],
      "metadata": {
        "id": "ScAxtsh0f_hN",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8ff91049-6088-46c8-f25e-bd85470e3891"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    num  prin_num prin  lap_1  coll_1   lap_2  coll_2 if Unnamed: 8 Unnamed: 9\n",
              "0     1         1    A  83.21      19  180.00      21  X          A          X\n",
              "1     1         2    B  78.51      12  157.30      16  O        NaN        NaN\n",
              "2     1         3    C  89.21      18  180.00      15  X        NaN        NaN\n",
              "3     1         4    D  74.50      15  180.00      18  X        NaN        NaN\n",
              "4     2         1    D  76.50      14  149.77      15  O          D          X\n",
              "..  ...       ...  ...    ...     ...     ...     ... ..        ...        ...\n",
              "59   15         4    D  82.20       8  155.20      10  O        NaN        NaN\n",
              "60   16         1    A  81.00      14  150.00       9  O          C          X\n",
              "61   16         2    D  80.00      12  142.30      11  O        NaN        NaN\n",
              "62   16         3    C  74.00      10  151.20      16  O        NaN        NaN\n",
              "63   16         4    B  77.00       9  152.30      14  O        NaN        NaN\n",
              "\n",
              "[64 rows x 10 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ecf884fa-cf2d-4033-9cb6-ebd17ce31b34\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>num</th>\n",
              "      <th>prin_num</th>\n",
              "      <th>prin</th>\n",
              "      <th>lap_1</th>\n",
              "      <th>coll_1</th>\n",
              "      <th>lap_2</th>\n",
              "      <th>coll_2</th>\n",
              "      <th>if</th>\n",
              "      <th>Unnamed: 8</th>\n",
              "      <th>Unnamed: 9</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>A</td>\n",
              "      <td>83.21</td>\n",
              "      <td>19</td>\n",
              "      <td>180.00</td>\n",
              "      <td>21</td>\n",
              "      <td>X</td>\n",
              "      <td>A</td>\n",
              "      <td>X</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>B</td>\n",
              "      <td>78.51</td>\n",
              "      <td>12</td>\n",
              "      <td>157.30</td>\n",
              "      <td>16</td>\n",
              "      <td>O</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>C</td>\n",
              "      <td>89.21</td>\n",
              "      <td>18</td>\n",
              "      <td>180.00</td>\n",
              "      <td>15</td>\n",
              "      <td>X</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>D</td>\n",
              "      <td>74.50</td>\n",
              "      <td>15</td>\n",
              "      <td>180.00</td>\n",
              "      <td>18</td>\n",
              "      <td>X</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>D</td>\n",
              "      <td>76.50</td>\n",
              "      <td>14</td>\n",
              "      <td>149.77</td>\n",
              "      <td>15</td>\n",
              "      <td>O</td>\n",
              "      <td>D</td>\n",
              "      <td>X</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59</th>\n",
              "      <td>15</td>\n",
              "      <td>4</td>\n",
              "      <td>D</td>\n",
              "      <td>82.20</td>\n",
              "      <td>8</td>\n",
              "      <td>155.20</td>\n",
              "      <td>10</td>\n",
              "      <td>O</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>60</th>\n",
              "      <td>16</td>\n",
              "      <td>1</td>\n",
              "      <td>A</td>\n",
              "      <td>81.00</td>\n",
              "      <td>14</td>\n",
              "      <td>150.00</td>\n",
              "      <td>9</td>\n",
              "      <td>O</td>\n",
              "      <td>C</td>\n",
              "      <td>X</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>61</th>\n",
              "      <td>16</td>\n",
              "      <td>2</td>\n",
              "      <td>D</td>\n",
              "      <td>80.00</td>\n",
              "      <td>12</td>\n",
              "      <td>142.30</td>\n",
              "      <td>11</td>\n",
              "      <td>O</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>62</th>\n",
              "      <td>16</td>\n",
              "      <td>3</td>\n",
              "      <td>C</td>\n",
              "      <td>74.00</td>\n",
              "      <td>10</td>\n",
              "      <td>151.20</td>\n",
              "      <td>16</td>\n",
              "      <td>O</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>63</th>\n",
              "      <td>16</td>\n",
              "      <td>4</td>\n",
              "      <td>B</td>\n",
              "      <td>77.00</td>\n",
              "      <td>9</td>\n",
              "      <td>152.30</td>\n",
              "      <td>14</td>\n",
              "      <td>O</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>64 rows × 10 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ecf884fa-cf2d-4033-9cb6-ebd17ce31b34')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-ecf884fa-cf2d-4033-9cb6-ebd17ce31b34 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-ecf884fa-cf2d-4033-9cb6-ebd17ce31b34');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 76
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_a = data[data['prin'] == 'A']\n",
        "df_b = data[data['prin'] == 'B']\n",
        "df_c = data[data['prin'] == 'C']\n",
        "df_d = data[data['prin'] == 'D']"
      ],
      "metadata": {
        "id": "4B1CR4aOJ4NI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "len(df_a['prin_num'])"
      ],
      "metadata": {
        "id": "1N0mSxVNJ4NI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "217f6799-00ab-404e-8b33-481df7889dcb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "16"
            ]
          },
          "metadata": {},
          "execution_count": 78
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "coll_a1 = df_a['coll_1']\n",
        "coll_b1 = df_b['coll_1']\n",
        "coll_c1 = df_c['coll_1']\n",
        "coll_d1 = df_d['coll_1']"
      ],
      "metadata": {
        "id": "YuZGx7gsJ4NJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "coll_a2 = df_a['coll_2']\n",
        "coll_b2 = df_b['coll_2']\n",
        "coll_c2 = df_c['coll_2']\n",
        "coll_d2 = df_d['coll_2']"
      ],
      "metadata": {
        "id": "laizqO2mJ4NJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "lap_a1 = df_a['lap_1']\n",
        "lap_b1 = df_b['lap_1']\n",
        "lap_c1 = df_c['lap_1']\n",
        "lap_d1 = df_d['lap_1']"
      ],
      "metadata": {
        "id": "cjNmR-9_J4NK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "lap_a2 = df_a['lap_2']\n",
        "lap_b2 = df_b['lap_2']\n",
        "lap_c2 = df_c['lap_2']\n",
        "lap_d2 = df_d['lap_2']"
      ],
      "metadata": {
        "id": "r8o292mKJ4NO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import scipy.stats as stats\n",
        "import pandas as pd\n",
        "import urllib\n",
        "from statsmodels.formula.api import ols\n",
        "from statsmodels.stats.anova import anova_lm\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "%matplotlib inline"
      ],
      "metadata": {
        "id": "PasnwUIMJ4NP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 정제\n",
        " \n",
        " 이 맵의 역대 최단 주행 시간은 1:42:07. 이는 한 번의 실수도 없이 이 맵을 인-아웃 등 여러 요소를 고려해 이끌어낼 수 있는 최단 시간. \n",
        " \n",
        " 즉, 이 시간은 이 맵을 주행하는 데 있어 필수불가결한 시간. 제하고 생각하는 것이 바람직하다."
      ],
      "metadata": {
        "id": "OokPuqg_J4NP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "lap_a2 = lap_a2 - 102.07\n",
        "lap_b2 = lap_b2 - 102.07\n",
        "lap_c2 = lap_c2 - 102.07\n",
        "lap_d2 = lap_d2 - 102.07"
      ],
      "metadata": {
        "id": "WyDKshLPJ4NQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "lap_a2"
      ],
      "metadata": {
        "id": "CFKaDS6-J4NQ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "60ffe922-393f-44a5-adc2-9f4b1a840d3c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0     77.93\n",
              "6     44.78\n",
              "8     45.03\n",
              "12    37.18\n",
              "17    43.82\n",
              "21    37.18\n",
              "27    36.73\n",
              "30    36.43\n",
              "34    39.91\n",
              "37    41.70\n",
              "42    77.93\n",
              "45    39.65\n",
              "50    35.33\n",
              "52    36.33\n",
              "56    49.13\n",
              "60    47.93\n",
              "Name: lap_2, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 85
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##시각화"
      ],
      "metadata": {
        "id": "O6oZpJSgJ4NR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "lap_b1"
      ],
      "metadata": {
        "id": "PwDH0hAX8DFe",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "05ffff39-7489-468c-cc11-08af4c61cfbb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1     78.51\n",
              "7     76.42\n",
              "9     72.98\n",
              "14    72.62\n",
              "16    76.17\n",
              "23    68.29\n",
              "25    69.48\n",
              "31    85.20\n",
              "32    75.78\n",
              "39    72.30\n",
              "41    99.99\n",
              "47    67.29\n",
              "48    72.18\n",
              "53    73.70\n",
              "58    84.30\n",
              "63    77.00\n",
              "Name: lap_1, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 86
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plot_data = [lap_a1, lap_b1, lap_c1, lap_d1]\n",
        "ax = plt.boxplot(plot_data)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "5-y2bZsf76JN",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3b0d83ac-241a-4a97-afcd-a395f44d4719"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plot_data = [lap_a2, lap_b2, lap_c2, lap_d2]\n",
        "ax = plt.boxplot(plot_data)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "_psE9NVBJ4NR",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f4c40b5b-7d05-4198-f5bc-129093cef0ad"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXAAAAD8CAYAAABuHP8oAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAANtElEQVR4nO3db2xd9XnA8e9DHOySrSUGL0JkWSINsdSRoMNCTEyTRsrE1gp4USH2T9GElDdLRtdJLX0FfTFplea1fdUoKtsirQm0DATqi6ooTjVFmlgdYBslTDBGOlAgbgmiC2NA+uyFDyRxTH1jn+tzH/v7kSzfe3yv8+ig++Xe3z3nOjITSVI9F3U9gCRpcQy4JBVlwCWpKAMuSUUZcEkqyoBLUlE9BTwi/jwifhgRz0TEgYgYiYgtEfFERLwQEQ9GxMX9HlaSdMaCAY+IK4E/AyYycxuwBrgT+DLwlcz8VeAkcFc/B5UknavXJZQh4CMRMQRcAhwHbgIean6+D7i9/fEkSR9maKEbZOYrEfHXwI+A/wW+BxwB3sjM95qbvQxcudDvuvzyy3Pz5s2Ln1aSVqEjR478ODPH5m5fMOARsR64DdgCvAF8G7il1384InYCOwE2bdrE9PR0r3eVJAERcWy+7b0soXwS+K/MnMnMd4GHgRuBS5slFYCNwCvz3Tkz92bmRGZOjI2d9z8QSdIi9RLwHwE3RMQlERHAduBZ4BDwmeY2O4BH+zOiJGk+CwY8M59g9s3KJ4F/b+6zF/gC8LmIeAG4DLi/j3NKkuZYcA0cIDPvBe6ds/lF4PrWJ5Ik9cQzMSWpKAN+lt27dzMyMkJEMDIywu7du7seqawDBw6wbds21qxZw7Zt2zhw4EDXI5Xm/mzXinmsZ+ayfV133XU5qHbt2pVDQ0M5OTmZp06dysnJyRwaGspdu3Z1PVo5+/fvzy1btuTU1FS+8847OTU1lVu2bMn9+/d3PVpJ7s92VXysA9M5T1MNeGN4eDgnJyfP2TY5OZnDw8MdTVTX+Ph4Tk1NnbNtamoqx8fHO5qoNvdnuyo+1j8s4JHL+DcxJyYmclBP5IkITp06xSWXXPLBtrfeeot169axnPtoJVizZg1vv/02a9eu/WDbu+++y8jICKdPn+5wsprcn+2q+FiPiCOZOTF3u2vgjeHhYfbs2XPOtj179jA8PNzRRHVt3bqVw4cPn7Pt8OHDbN26taOJanN/tmtFPdbne1rer69BXkKpuC42qFyzbZf7s10VH+u4Br6wXbt25fDwcAI5PDw80P9BB93+/ftzfHw8L7roohwfHzc2S+T+bFe1x/qHBdw1cEkacK6BS9IKY8AlqSgDLklFGXBJKsqAS1JRBlySijLgklSUAZekogy4JBVlwCWpKAMuSUUZcEkqyoBLUlEGXJKKMuCSVJQBl6SiDLgkFWXAJakoAy5JRRlwSSrKgEtSUQZckooy4JJUlAGXpKIMuCQVZcAlqSgDLklFLRjwiLg6Ip4+6+vNiPhsRIxGxOMR8Xzzff1yDCxJmrVgwDPzPzLz2sy8FrgOeAt4BLgHOJiZVwEHm+uSpGVyoUso24H/zMxjwG3Avmb7PuD2NgeTJP18FxrwO4EDzeUNmXm8ufwqsKG1qSRJC+o54BFxMXAr8O25P8vMBPJD7rczIqYjYnpmZmbRg0qSznUhz8B/F3gyM19rrr8WEVcANN9PzHenzNybmROZOTE2Nra0aSVJH7iQgP8+Z5ZPAB4DdjSXdwCPtjWUJGlhPQU8ItYBNwMPn7X5r4CbI+J54JPNdUnSMhnq5UaZeQq4bM62nzB7VIokqQOeiSlJRRlwSSrKgEtSUQZckooy4JJUlAGXpKIMuCQVZcAlqSgDLklFGXBJKsqAS1JRBlySijLgklSUAZekogy4JBVlwCWpKAMuSUUZcEkqyoBLUlEGXJKKMuCSVJQBl6SiDLgkFWXAJakoAy5JRRlwSSrKgEtSUQZckooy4JJUlAGXpKIMuCQVZcAlqSgDLklFGXBJKsqAS1JRPQU8Ii6NiIci4rmIOBoRvxERoxHxeEQ833xf3+9hJUln9PoM/GvAdzPz14BrgKPAPcDBzLwKONhclyQtkwUDHhEfA34LuB8gM9/JzDeA24B9zc32Abf3a0hJ0vl6eQa+BZgB/i4inoqIb0TEOmBDZh5vbvMqsKFfQ0qSztdLwIeAXwe+npmfAE4xZ7kkMxPI+e4cETsjYjoipmdmZpY6rySp0UvAXwZezswnmusPMRv01yLiCoDm+4n57pyZezNzIjMnxsbG2phZkkQPAc/MV4H/joirm03bgWeBx4AdzbYdwKN9mVCSNK+hHm+3G/hmRFwMvAj8CbPx/1ZE3AUcA+7oz4iSpPn0FPDMfBqYmOdH29sdR5LUK8/ElKSiDLgkFWXAJakoAy5JRRlwSSrKgEtSUQZckooy4JJUlAGXpKIMuCQVZcAlqSgDLklFGXBJKsqAS1JRBlySijLgklRUr3+RRzpPRLT6+2b/NrakXhlwLVovwY0Iwyz1iUsoklSUAZekogy4JBVlwCWpKAMuSUUZcEkqyoBLUlEGXJKK8kQeaUC0eWbraj95arWcJWzApQHhma3t6XUfVd+fLqFIUlEGXJKKMuCSVJQBl6SiDLgkFWXAJakoAy5JRRlwSSqqpxN5IuIl4KfAaeC9zJyIiFHgQWAz8BJwR2ae7M+YkqS5LuQZ+G9n5rWZOdFcvwc4mJlXAQeb65KkZbKUJZTbgH3N5X3A7UsfR5LUq14DnsD3IuJIROxstm3IzOPN5VeBDa1Pp86Mjo4SEUv+Alr5PRHB6Ohox3tFGiy9fpjVb2bmKxHxS8DjEfHc2T/MzIyIeT8Rpgn+ToBNmzYtaVgtn5MnTw7ch/y0/QlzUnU9PQPPzFea7yeAR4Drgdci4gqA5vuJD7nv3sycyMyJsbGxdqaWCmnr1YyvaDTXggGPiHUR8YvvXwZ+B3gGeAzY0dxsB/Bov4aUKnv/1cygfZ086UFj1fWyhLIBeKT5v/8QsD8zvxsRPwC+FRF3AceAO/o3ZjtWy4e8S1odFgx4Zr4IXDPP9p8A2/sxVL+slg95l7Q6eCamJBVlwCWpKAMuSUUZcEkqyoBLUlEGXJKKMuCSVJQBl6SiDLgkFWXAJakoAy5JRRlwSSrKgEtSUb3+RZ6BNzo62urnG7f10bPr16/n9ddfb+V3SdLZVkzAB/FPgIF/BkxS/6yYgEtaHXy1fYYBl1SKr7bP8E1MSSrKgEtSUQZckooy4JJUlG9iSn2W934U7vtY12OcJ+/9aNcjaIkMuNRn8aU3B/aoibyv6ym0FC6hSFJRBlySijLgklSUa+Ca1yC+8eabbtK5DLjmNYhvvPmmm3Qul1AkqSgDLklFGXBJKsqAS1JRvokpqZRBPEIKujlKyoBLKmUQj5CCbo6ScglFkorqOeARsSYinoqI7zTXt0TEExHxQkQ8GBEX929MSdJcF7KEcjdwFHh/oefLwFcy84GI2APcBXy95fl65rqYpNWmp4BHxEbgU8BfAp+L2b/eeRPwB81N9gH30WHAXReTtNr0uoTyVeDzwM+a65cBb2Tme831l4ErW55NkvRzLBjwiPg0cCIzjyzmH4iInRExHRHTMzMzi/kVkqR59PIM/Ebg1oh4CXiA2aWTrwGXRsT7SzAbgVfmu3Nm7s3MicycGBsba2FkSRL0EPDM/GJmbszMzcCdwFRm/iFwCPhMc7MdwKN9m1KSdJ6lHAf+BWbf0HyB2TXx+9sZSZLUiws6EzMzvw98v7n8InB9+yNpUMwebDQ41q9f3/UI0kDxVHrNq61DMiNiIA/vlFYCAy4tg0F7NQO+olkJDLjUZ22+AvEVjc5mwCWV4yuaWQZcUim+ojnDj5OVpKIMuCQVZcAlqagVtQbuGxuSVpMVE3Df2JC02riEIklFrZhn4FJ1vS4B9nI7X0GuDgZcGhBGVxfKJRRJKsqAS1JRBlySilpVa+AXcpy4bxRJGnSrKuAGV9JK4hKKJBVlwCWpKAMuSUUZcEkqyoBLUlGr6igUtavNz+4AjxKSLpQB16IZXA2q1XLOhwGXtOIManDb5hq4JBVlwCWpKAMuSUUZcEkqyoBLUlEGXJKKMuCSVJQBl6SiYjkPeI+IGeDYsv2Di3c58OOuh1gh3Jftcn+2q8r+/JXMHJu7cVkDXkVETGfmRNdzrATuy3a5P9tVfX+6hCJJRRlwSSrKgM9vb9cDrCDuy3a5P9tVen+6Bi5JRfkMXJKKMuBniYi/jYgTEfFM17NUFxG/HBGHIuLZiPhhRNzd9UyVRcRIRPxLRPxrsz+/1PVM1UXEmoh4KiK+0/Usi2XAz/X3wC1dD7FCvAf8RWZ+HLgB+NOI+HjHM1X2f8BNmXkNcC1wS0Tc0PFM1d0NHO16iKUw4GfJzH8CXu96jpUgM49n5pPN5Z8y+0C5stup6spZ/9NcXdt8+QbWIkXERuBTwDe6nmUpDLj6LiI2A58Anuh2ktqal/xPAyeAxzPT/bl4XwU+D/ys60GWwoCrryLiF4B/BD6bmW92PU9lmXk6M68FNgLXR8S2rmeqKCI+DZzIzCNdz7JUBlx9ExFrmY33NzPz4a7nWSky8w3gEL5fs1g3ArdGxEvAA8BNEfEP3Y60OAZcfRERAdwPHM3Mv+l6nuoiYiwiLm0ufwS4GXiu26lqyswvZubGzNwM3AlMZeYfdTzWohjws0TEAeCfgasj4uWIuKvrmQq7EfhjZp/dPN18/V7XQxV2BXAoIv4N+AGza+BlD39TOzwTU5KK8hm4JBVlwCWpKAMuSUUZcEkqyoBLUlEGXJKKMuCSVJQBl6Si/h8Tomb3Ds1uLQAAAABJRU5ErkJggg==\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "coll_a2"
      ],
      "metadata": {
        "id": "suK30aJLJ4NS",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ef77737f-ca51-4e0f-8de0-b10fcd8c6aab"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0     21\n",
              "6     18\n",
              "8     14\n",
              "12     7\n",
              "17     7\n",
              "21     9\n",
              "27     5\n",
              "30     9\n",
              "34    14\n",
              "37     9\n",
              "42    13\n",
              "45    10\n",
              "50     6\n",
              "52    10\n",
              "56     9\n",
              "60     9\n",
              "Name: coll_2, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 89
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plot_data = [coll_a1, coll_b1, coll_c1, coll_d1]\n",
        "ax = plt.boxplot(plot_data)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "gaO3RnU7iVjk",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4b66f8f1-cb69-4582-eb67-223927bfcd2a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plot_data = [coll_a2, coll_b2, coll_c2, coll_d2]\n",
        "ax = plt.boxplot(plot_data)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "Y9pSRTQoJ4NU",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "293d964b-125f-4fb6-f191-9e95e3aadb81"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###일원분산분석"
      ],
      "metadata": {
        "id": "tyctG4j0J4NV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "F_statistic, pVal = stats.f_oneway(lap_a1, lap_b1, lap_c1, lap_d1)\n",
        "print('카트라이더 데이터의 일원분산분석 결과 : F={0:.1f}, p={1:.5f}'.format(F_statistic, pVal))\n",
        "if pVal < 0.05:\n",
        "    print('P-value 값이 충분히 작음으로 인해 그룹의 평균값이 통계적으로 유의미하게 차이납니다.')"
      ],
      "metadata": {
        "id": "g7PcZ3HMLFT2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "faa01747-a59d-4407-a904-6da696183ad6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "카트라이더 데이터의 일원분산분석 결과 : F=0.3, p=0.82938\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "F_statistic, pVal = stats.f_oneway(coll_a1, coll_b1, coll_c1, coll_d1)\n",
        "print('카트라이더 데이터의 일원분산분석 결과 : F={0:.1f}, p={1:.5f}'.format(F_statistic, pVal))\n",
        "if pVal < 0.05:\n",
        "    print('P-value 값이 충분히 작음으로 인해 그룹의 평균값이 통계적으로 유의미하게 차이납니다.')"
      ],
      "metadata": {
        "id": "xMum7-xG93yh",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f5216cff-be42-4de1-dc94-e94a3e18bd00"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "카트라이더 데이터의 일원분산분석 결과 : F=0.1, p=0.95083\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "F_statistic, pVal = stats.f_oneway(lap_a2, lap_b2, lap_c2, lap_d2)\n",
        "print('카트라이더 데이터의 일원분산분석 결과 : F={0:.1f}, p={1:.5f}'.format(F_statistic, pVal))\n",
        "if pVal < 0.05:\n",
        "    print('P-value 값이 충분히 작음으로 인해 그룹의 평균값이 통계적으로 유의미하게 차이납니다.')"
      ],
      "metadata": {
        "id": "adSwRN4yJ4NW",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c9f8a12d-4fd9-4512-d870-06f2dc7804ce"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "카트라이더 데이터의 일원분산분석 결과 : F=0.0, p=0.99936\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "F_statistic, pVal = stats.f_oneway(coll_a2, coll_b2, coll_c2, coll_d2)\n",
        "print('카트라이더 데이터의 일원분산분석 결과 : F={0:.1f}, p={1:.5f}'.format(F_statistic, pVal))\n",
        "if pVal < 0.05:\n",
        "    print('P-value 값이 충분히 작음으로 인해 그룹의 평균값이 통계적으로 유의미하게 차이납니다.')"
      ],
      "metadata": {
        "id": "wu65V3XjJ4NX",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "da1ff731-9230-4e68-e571-1bd5a8724ce0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "카트라이더 데이터의 일원분산분석 결과 : F=0.3, p=0.85141\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 경험자의 반응"
      ],
      "metadata": {
        "id": "OktrJ1ITVG7M"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##전처리"
      ],
      "metadata": {
        "id": "YFPUDZB7VG7N"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd"
      ],
      "metadata": {
        "id": "xyLVvKnpVG7N"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data = pd.read_csv('/content/drive/MyDrive/b.csv')"
      ],
      "metadata": {
        "id": "L7PDjyhzVG7O"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data"
      ],
      "metadata": {
        "id": "BxA3G8XeVG7P",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "20ef99df-e31a-4da8-c2ae-5d3b92086b90"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    num  prin_num prin  lap_1  coll_1   lap_2  coll_2   if condition  \\\n",
              "0    17         1    C  64.65       3  126.31       1    O         A   \n",
              "1    17         2    A  67.23       9  131.11       3    O       NaN   \n",
              "2    17         3    D  62.64       2  125.18       3    O       NaN   \n",
              "3    17         4    B  62.59       3  122.43       0    O       NaN   \n",
              "4    18         1    D  68.09       2  139.58       7    O         A   \n",
              "..  ...       ...  ...    ...     ...     ...     ...  ...       ...   \n",
              "59   31         4    C  63.30       2  127.40       2    O       NaN   \n",
              "60   32         1    C  63.20       2  121.30       3    O         C   \n",
              "61   32         2    A  65.20       3  125.20       3    O       NaN   \n",
              "62   32         3    D  67.10       2  124.20       4    O       NaN   \n",
              "63   32         4    B  63.20       1  120.10       1  NaN       NaN   \n",
              "\n",
              "   Unnamed: 9  \n",
              "0           O  \n",
              "1         NaN  \n",
              "2         NaN  \n",
              "3         NaN  \n",
              "4           O  \n",
              "..        ...  \n",
              "59        NaN  \n",
              "60        NaN  \n",
              "61        NaN  \n",
              "62        NaN  \n",
              "63        NaN  \n",
              "\n",
              "[64 rows x 10 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-458c3a09-28e4-4173-9628-8ccc4b6c755f\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>num</th>\n",
              "      <th>prin_num</th>\n",
              "      <th>prin</th>\n",
              "      <th>lap_1</th>\n",
              "      <th>coll_1</th>\n",
              "      <th>lap_2</th>\n",
              "      <th>coll_2</th>\n",
              "      <th>if</th>\n",
              "      <th>condition</th>\n",
              "      <th>Unnamed: 9</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>17</td>\n",
              "      <td>1</td>\n",
              "      <td>C</td>\n",
              "      <td>64.65</td>\n",
              "      <td>3</td>\n",
              "      <td>126.31</td>\n",
              "      <td>1</td>\n",
              "      <td>O</td>\n",
              "      <td>A</td>\n",
              "      <td>O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>17</td>\n",
              "      <td>2</td>\n",
              "      <td>A</td>\n",
              "      <td>67.23</td>\n",
              "      <td>9</td>\n",
              "      <td>131.11</td>\n",
              "      <td>3</td>\n",
              "      <td>O</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>17</td>\n",
              "      <td>3</td>\n",
              "      <td>D</td>\n",
              "      <td>62.64</td>\n",
              "      <td>2</td>\n",
              "      <td>125.18</td>\n",
              "      <td>3</td>\n",
              "      <td>O</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>17</td>\n",
              "      <td>4</td>\n",
              "      <td>B</td>\n",
              "      <td>62.59</td>\n",
              "      <td>3</td>\n",
              "      <td>122.43</td>\n",
              "      <td>0</td>\n",
              "      <td>O</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>18</td>\n",
              "      <td>1</td>\n",
              "      <td>D</td>\n",
              "      <td>68.09</td>\n",
              "      <td>2</td>\n",
              "      <td>139.58</td>\n",
              "      <td>7</td>\n",
              "      <td>O</td>\n",
              "      <td>A</td>\n",
              "      <td>O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59</th>\n",
              "      <td>31</td>\n",
              "      <td>4</td>\n",
              "      <td>C</td>\n",
              "      <td>63.30</td>\n",
              "      <td>2</td>\n",
              "      <td>127.40</td>\n",
              "      <td>2</td>\n",
              "      <td>O</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>60</th>\n",
              "      <td>32</td>\n",
              "      <td>1</td>\n",
              "      <td>C</td>\n",
              "      <td>63.20</td>\n",
              "      <td>2</td>\n",
              "      <td>121.30</td>\n",
              "      <td>3</td>\n",
              "      <td>O</td>\n",
              "      <td>C</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>61</th>\n",
              "      <td>32</td>\n",
              "      <td>2</td>\n",
              "      <td>A</td>\n",
              "      <td>65.20</td>\n",
              "      <td>3</td>\n",
              "      <td>125.20</td>\n",
              "      <td>3</td>\n",
              "      <td>O</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>62</th>\n",
              "      <td>32</td>\n",
              "      <td>3</td>\n",
              "      <td>D</td>\n",
              "      <td>67.10</td>\n",
              "      <td>2</td>\n",
              "      <td>124.20</td>\n",
              "      <td>4</td>\n",
              "      <td>O</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>63</th>\n",
              "      <td>32</td>\n",
              "      <td>4</td>\n",
              "      <td>B</td>\n",
              "      <td>63.20</td>\n",
              "      <td>1</td>\n",
              "      <td>120.10</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>64 rows × 10 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-458c3a09-28e4-4173-9628-8ccc4b6c755f')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-458c3a09-28e4-4173-9628-8ccc4b6c755f button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-458c3a09-28e4-4173-9628-8ccc4b6c755f');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 98
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_a = data[data['prin'] == 'A']\n",
        "df_b = data[data['prin'] == 'B']\n",
        "df_c = data[data['prin'] == 'C']\n",
        "df_d = data[data['prin'] == 'D']"
      ],
      "metadata": {
        "id": "PhMRaZzdVG7P"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "len(df_a['prin_num'])"
      ],
      "metadata": {
        "id": "vgzBIsJRVG7Q",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "05b6dd25-e2d9-4a20-e16e-e97c2609471d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "16"
            ]
          },
          "metadata": {},
          "execution_count": 100
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "coll_a1 = df_a['coll_1']\n",
        "coll_b1 = df_b['coll_1']\n",
        "coll_c1 = df_c['coll_1']\n",
        "coll_d1 = df_d['coll_1']"
      ],
      "metadata": {
        "id": "VY2yyjCcVG7R"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "coll_a2 = df_a['coll_2']\n",
        "coll_b2 = df_b['coll_2']\n",
        "coll_c2 = df_c['coll_2']\n",
        "coll_d2 = df_d['coll_2']"
      ],
      "metadata": {
        "id": "4v8-vay_VG7R"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "lap_a1 = df_a['lap_1']\n",
        "lap_b1 = df_b['lap_1']\n",
        "lap_c1 = df_c['lap_1']\n",
        "lap_d1 = df_d['lap_1']"
      ],
      "metadata": {
        "id": "ttkthvVMVG7R"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "lap_a2 = df_a['lap_2']\n",
        "lap_b2 = df_b['lap_2']\n",
        "lap_c2 = df_c['lap_2']\n",
        "lap_d2 = df_d['lap_2']"
      ],
      "metadata": {
        "id": "RWvlps9PVG7S"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import scipy.stats as stats\n",
        "import pandas as pd\n",
        "import urllib\n",
        "from statsmodels.formula.api import ols\n",
        "from statsmodels.stats.anova import anova_lm\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "%matplotlib inline"
      ],
      "metadata": {
        "id": "dipb_eLYVG7S"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 정제\n",
        " \n",
        " 이 맵의 역대 최단 주행 시간은 1:42:07. 이는 한 번의 실수도 없이 이 맵을 인-아웃 등 여러 요소를 고려해 이끌어낼 수 있는 최단 시간. \n",
        " \n",
        " 즉, 이 시간은 이 맵을 주행하는 데 있어 필수불가결한 시간. 제하고 생각하는 것이 바람직하다."
      ],
      "metadata": {
        "id": "tclwK7IKVG7S"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "lap_a2 = lap_a2 - 102.07\n",
        "lap_b2 = lap_b2 - 102.07\n",
        "lap_c2 = lap_c2 - 102.07\n",
        "lap_d2 = lap_d2 - 102.07"
      ],
      "metadata": {
        "id": "rXJvngPIVG7S"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "lap_a2"
      ],
      "metadata": {
        "id": "DoepsBOTVG7T",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "222679ca-ff40-4577-c9b9-bed12408cce0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1     29.04\n",
              "6     29.79\n",
              "10    23.60\n",
              "14    27.22\n",
              "16    39.28\n",
              "20    50.69\n",
              "27     4.71\n",
              "29    26.12\n",
              "33    19.73\n",
              "36    15.03\n",
              "40    37.05\n",
              "47    24.23\n",
              "48    15.53\n",
              "53    21.43\n",
              "58    29.13\n",
              "61    23.13\n",
              "Name: lap_2, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 107
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##시각화"
      ],
      "metadata": {
        "id": "vhK0cxvIVG7T"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "lap_b1"
      ],
      "metadata": {
        "id": "_L9NDKTBVG7T",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2dada8f2-d184-4100-ade6-6702d542d0af"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3     62.59\n",
              "7     66.20\n",
              "8     68.73\n",
              "15    65.27\n",
              "19    71.16\n",
              "22    75.30\n",
              "24    59.33\n",
              "31    68.59\n",
              "35    63.10\n",
              "38    61.20\n",
              "42    71.39\n",
              "44    63.20\n",
              "49    62.30\n",
              "52    63.20\n",
              "56    64.40\n",
              "63    63.20\n",
              "Name: lap_1, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 108
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plot_data = [lap_a1, lap_b1, lap_c1, lap_d1]\n",
        "ax = plt.boxplot(plot_data)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "DOV-n086VG7U",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5d0a79cd-aa44-4c7b-fb40-37bad3ad9404"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plot_data = [lap_a2, lap_b2, lap_c2, lap_d2]\n",
        "ax = plt.boxplot(plot_data)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "8EVrxCkPVG7U",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4f524e4a-ddea-4855-e92d-f1c19b9cd471"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "coll_a2"
      ],
      "metadata": {
        "id": "IKl0AqxrVG7U",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8f7e280d-bc4b-4f9e-c49e-5e51b20dafb8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1      3\n",
              "6      3\n",
              "10     2\n",
              "14     7\n",
              "16    10\n",
              "20    13\n",
              "27     0\n",
              "29     6\n",
              "33     0\n",
              "36     1\n",
              "40    10\n",
              "47     4\n",
              "48     2\n",
              "53     2\n",
              "58     3\n",
              "61     3\n",
              "Name: coll_2, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 111
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plot_data = [coll_a1, coll_b1, coll_c1, coll_d1]\n",
        "ax = plt.boxplot(plot_data)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "D33A05ERVG7V",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "50390505-43bb-409c-cca2-abb4a16fe0c4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plot_data = [coll_a2, coll_b2, coll_c2, coll_d2]\n",
        "ax = plt.boxplot(plot_data)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "NVCy_oJYVG7V",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "13bd51eb-972a-40e8-dcb9-66af43b28b96"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###일원분산분석"
      ],
      "metadata": {
        "id": "DSRddeoSVG7V"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "F_statistic, pVal = stats.f_oneway(lap_a1, lap_b1, lap_c1, lap_d1)\n",
        "print('카트라이더 데이터의 일원분산분석 결과 : F={0:.1f}, p={1:.5f}'.format(F_statistic, pVal))\n",
        "if pVal < 0.05:\n",
        "    print('P-value 값이 충분히 작음으로 인해 그룹의 평균값이 통계적으로 유의미하게 차이납니다.')"
      ],
      "metadata": {
        "id": "258VyWW1VG7V",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ad2ef336-664a-4741-cba7-e12552aaac78"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "카트라이더 데이터의 일원분산분석 결과 : F=0.2, p=0.86174\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "F_statistic, pVal = stats.f_oneway(coll_a1, coll_b1, coll_c1, coll_d1)\n",
        "print('카트라이더 데이터의 일원분산분석 결과 : F={0:.1f}, p={1:.5f}'.format(F_statistic, pVal))\n",
        "if pVal < 0.05:\n",
        "    print('P-value 값이 충분히 작음으로 인해 그룹의 평균값이 통계적으로 유의미하게 차이납니다.')"
      ],
      "metadata": {
        "id": "JeU-XO1vVG7W",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d3806f57-9ddf-4c3a-b70e-00d206a59367"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "카트라이더 데이터의 일원분산분석 결과 : F=0.6, p=0.61147\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "F_statistic, pVal = stats.f_oneway(lap_a2, lap_b2, lap_c2, lap_d2)\n",
        "print('카트라이더 데이터의 일원분산분석 결과 : F={0:.1f}, p={1:.5f}'.format(F_statistic, pVal))\n",
        "if pVal < 0.05:\n",
        "    print('P-value 값이 충분히 작음으로 인해 그룹의 평균값이 통계적으로 유의미하게 차이납니다.')"
      ],
      "metadata": {
        "id": "MH9I0aYSVG7W",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4a661cd7-c2c5-4475-a762-848048b15083"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "카트라이더 데이터의 일원분산분석 결과 : F=0.0, p=0.98820\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "F_statistic, pVal = stats.f_oneway(coll_a2, coll_b2, coll_c2, coll_d2)\n",
        "print('카트라이더 데이터의 일원분산분석 결과 : F={0:.1f}, p={1:.5f}'.format(F_statistic, pVal))\n",
        "if pVal < 0.05:\n",
        "    print('P-value 값이 충분히 작음으로 인해 그룹의 평균값이 통계적으로 유의미하게 차이납니다.')"
      ],
      "metadata": {
        "id": "Slc6DjuJVG7X",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "890b6561-d99f-4217-900e-cc78a5478fd9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "카트라이더 데이터의 일원분산분석 결과 : F=0.2, p=0.92282\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 병합"
      ],
      "metadata": {
        "id": "I-oTsPI-mOXQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data"
      ],
      "metadata": {
        "id": "xhROyNwzmpEK",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "outputId": "915e452d-05de-4263-eb67-582ebf358681"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    num  prin_num prin  lap_1  coll_1   lap_2  coll_2   if condition  \\\n",
              "0    17         1    C  64.65       3  126.31       1    O         A   \n",
              "1    17         2    A  67.23       9  131.11       3    O       NaN   \n",
              "2    17         3    D  62.64       2  125.18       3    O       NaN   \n",
              "3    17         4    B  62.59       3  122.43       0    O       NaN   \n",
              "4    18         1    D  68.09       2  139.58       7    O         A   \n",
              "..  ...       ...  ...    ...     ...     ...     ...  ...       ...   \n",
              "59   31         4    C  63.30       2  127.40       2    O       NaN   \n",
              "60   32         1    C  63.20       2  121.30       3    O         C   \n",
              "61   32         2    A  65.20       3  125.20       3    O       NaN   \n",
              "62   32         3    D  67.10       2  124.20       4    O       NaN   \n",
              "63   32         4    B  63.20       1  120.10       1  NaN       NaN   \n",
              "\n",
              "   Unnamed: 9  \n",
              "0           O  \n",
              "1         NaN  \n",
              "2         NaN  \n",
              "3         NaN  \n",
              "4           O  \n",
              "..        ...  \n",
              "59        NaN  \n",
              "60        NaN  \n",
              "61        NaN  \n",
              "62        NaN  \n",
              "63        NaN  \n",
              "\n",
              "[64 rows x 10 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-737b14db-7d2c-4699-85c6-40066eb35380\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>num</th>\n",
              "      <th>prin_num</th>\n",
              "      <th>prin</th>\n",
              "      <th>lap_1</th>\n",
              "      <th>coll_1</th>\n",
              "      <th>lap_2</th>\n",
              "      <th>coll_2</th>\n",
              "      <th>if</th>\n",
              "      <th>condition</th>\n",
              "      <th>Unnamed: 9</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>17</td>\n",
              "      <td>1</td>\n",
              "      <td>C</td>\n",
              "      <td>64.65</td>\n",
              "      <td>3</td>\n",
              "      <td>126.31</td>\n",
              "      <td>1</td>\n",
              "      <td>O</td>\n",
              "      <td>A</td>\n",
              "      <td>O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>17</td>\n",
              "      <td>2</td>\n",
              "      <td>A</td>\n",
              "      <td>67.23</td>\n",
              "      <td>9</td>\n",
              "      <td>131.11</td>\n",
              "      <td>3</td>\n",
              "      <td>O</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>17</td>\n",
              "      <td>3</td>\n",
              "      <td>D</td>\n",
              "      <td>62.64</td>\n",
              "      <td>2</td>\n",
              "      <td>125.18</td>\n",
              "      <td>3</td>\n",
              "      <td>O</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>17</td>\n",
              "      <td>4</td>\n",
              "      <td>B</td>\n",
              "      <td>62.59</td>\n",
              "      <td>3</td>\n",
              "      <td>122.43</td>\n",
              "      <td>0</td>\n",
              "      <td>O</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>18</td>\n",
              "      <td>1</td>\n",
              "      <td>D</td>\n",
              "      <td>68.09</td>\n",
              "      <td>2</td>\n",
              "      <td>139.58</td>\n",
              "      <td>7</td>\n",
              "      <td>O</td>\n",
              "      <td>A</td>\n",
              "      <td>O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59</th>\n",
              "      <td>31</td>\n",
              "      <td>4</td>\n",
              "      <td>C</td>\n",
              "      <td>63.30</td>\n",
              "      <td>2</td>\n",
              "      <td>127.40</td>\n",
              "      <td>2</td>\n",
              "      <td>O</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>60</th>\n",
              "      <td>32</td>\n",
              "      <td>1</td>\n",
              "      <td>C</td>\n",
              "      <td>63.20</td>\n",
              "      <td>2</td>\n",
              "      <td>121.30</td>\n",
              "      <td>3</td>\n",
              "      <td>O</td>\n",
              "      <td>C</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>61</th>\n",
              "      <td>32</td>\n",
              "      <td>2</td>\n",
              "      <td>A</td>\n",
              "      <td>65.20</td>\n",
              "      <td>3</td>\n",
              "      <td>125.20</td>\n",
              "      <td>3</td>\n",
              "      <td>O</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>62</th>\n",
              "      <td>32</td>\n",
              "      <td>3</td>\n",
              "      <td>D</td>\n",
              "      <td>67.10</td>\n",
              "      <td>2</td>\n",
              "      <td>124.20</td>\n",
              "      <td>4</td>\n",
              "      <td>O</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>63</th>\n",
              "      <td>32</td>\n",
              "      <td>4</td>\n",
              "      <td>B</td>\n",
              "      <td>63.20</td>\n",
              "      <td>1</td>\n",
              "      <td>120.10</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>64 rows × 10 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-737b14db-7d2c-4699-85c6-40066eb35380')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-737b14db-7d2c-4699-85c6-40066eb35380 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-737b14db-7d2c-4699-85c6-40066eb35380');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 118
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data2 = pd.read_csv('/content/drive/MyDrive/a.csv')"
      ],
      "metadata": {
        "id": "-tw6x24AmRbF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data= pd.concat([data2,data])"
      ],
      "metadata": {
        "id": "IjtlNBiymXJ6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data_frame"
      ],
      "metadata": {
        "id": "VhYUgN-nmjbc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "outputId": "44dc5642-a485-458a-f6be-9902fc4ad721"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    num  prin_num prin  lap_1  coll_1   lap_2  coll_2   if Unnamed: 8  \\\n",
              "0     1         1    A  83.21      19  180.00      21    X          A   \n",
              "1     1         2    B  78.51      12  157.30      16    O        NaN   \n",
              "2     1         3    C  89.21      18  180.00      15    X        NaN   \n",
              "3     1         4    D  74.50      15  180.00      18    X        NaN   \n",
              "4     2         1    D  76.50      14  149.77      15    O          D   \n",
              "..  ...       ...  ...    ...     ...     ...     ...  ...        ...   \n",
              "59   31         4    C  63.30       2  127.40       2    O        NaN   \n",
              "60   32         1    C  63.20       2  121.30       3    O        NaN   \n",
              "61   32         2    A  65.20       3  125.20       3    O        NaN   \n",
              "62   32         3    D  67.10       2  124.20       4    O        NaN   \n",
              "63   32         4    B  63.20       1  120.10       1  NaN        NaN   \n",
              "\n",
              "   Unnamed: 9 condition  \n",
              "0           X       NaN  \n",
              "1         NaN       NaN  \n",
              "2         NaN       NaN  \n",
              "3         NaN       NaN  \n",
              "4           X       NaN  \n",
              "..        ...       ...  \n",
              "59        NaN       NaN  \n",
              "60        NaN         C  \n",
              "61        NaN       NaN  \n",
              "62        NaN       NaN  \n",
              "63        NaN       NaN  \n",
              "\n",
              "[128 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-dac4ab76-d926-4ecb-a5d5-97abde4fb749\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>num</th>\n",
              "      <th>prin_num</th>\n",
              "      <th>prin</th>\n",
              "      <th>lap_1</th>\n",
              "      <th>coll_1</th>\n",
              "      <th>lap_2</th>\n",
              "      <th>coll_2</th>\n",
              "      <th>if</th>\n",
              "      <th>Unnamed: 8</th>\n",
              "      <th>Unnamed: 9</th>\n",
              "      <th>condition</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>A</td>\n",
              "      <td>83.21</td>\n",
              "      <td>19</td>\n",
              "      <td>180.00</td>\n",
              "      <td>21</td>\n",
              "      <td>X</td>\n",
              "      <td>A</td>\n",
              "      <td>X</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>B</td>\n",
              "      <td>78.51</td>\n",
              "      <td>12</td>\n",
              "      <td>157.30</td>\n",
              "      <td>16</td>\n",
              "      <td>O</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>C</td>\n",
              "      <td>89.21</td>\n",
              "      <td>18</td>\n",
              "      <td>180.00</td>\n",
              "      <td>15</td>\n",
              "      <td>X</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>D</td>\n",
              "      <td>74.50</td>\n",
              "      <td>15</td>\n",
              "      <td>180.00</td>\n",
              "      <td>18</td>\n",
              "      <td>X</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>D</td>\n",
              "      <td>76.50</td>\n",
              "      <td>14</td>\n",
              "      <td>149.77</td>\n",
              "      <td>15</td>\n",
              "      <td>O</td>\n",
              "      <td>D</td>\n",
              "      <td>X</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59</th>\n",
              "      <td>31</td>\n",
              "      <td>4</td>\n",
              "      <td>C</td>\n",
              "      <td>63.30</td>\n",
              "      <td>2</td>\n",
              "      <td>127.40</td>\n",
              "      <td>2</td>\n",
              "      <td>O</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>60</th>\n",
              "      <td>32</td>\n",
              "      <td>1</td>\n",
              "      <td>C</td>\n",
              "      <td>63.20</td>\n",
              "      <td>2</td>\n",
              "      <td>121.30</td>\n",
              "      <td>3</td>\n",
              "      <td>O</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>61</th>\n",
              "      <td>32</td>\n",
              "      <td>2</td>\n",
              "      <td>A</td>\n",
              "      <td>65.20</td>\n",
              "      <td>3</td>\n",
              "      <td>125.20</td>\n",
              "      <td>3</td>\n",
              "      <td>O</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>62</th>\n",
              "      <td>32</td>\n",
              "      <td>3</td>\n",
              "      <td>D</td>\n",
              "      <td>67.10</td>\n",
              "      <td>2</td>\n",
              "      <td>124.20</td>\n",
              "      <td>4</td>\n",
              "      <td>O</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>63</th>\n",
              "      <td>32</td>\n",
              "      <td>4</td>\n",
              "      <td>B</td>\n",
              "      <td>63.20</td>\n",
              "      <td>1</td>\n",
              "      <td>120.10</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>128 rows × 11 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dac4ab76-d926-4ecb-a5d5-97abde4fb749')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-dac4ab76-d926-4ecb-a5d5-97abde4fb749 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-dac4ab76-d926-4ecb-a5d5-97abde4fb749');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 121
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##전처리"
      ],
      "metadata": {
        "id": "f3r9TIMCVMcL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd"
      ],
      "metadata": {
        "id": "H8_Wkz_eVMcL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "id": "2RI3fMKjVMcL",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c777c0c4-2fd7-4854-f515-c1b4abad199c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data"
      ],
      "metadata": {
        "id": "-tDChMMNVMcM",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "outputId": "0df2f29b-d040-490c-ca27-69cfdc27cf6c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    num  prin_num prin  lap_1  coll_1   lap_2  coll_2   if Unnamed: 8  \\\n",
              "0     1         1    A  83.21      19  180.00      21    X          A   \n",
              "1     1         2    B  78.51      12  157.30      16    O        NaN   \n",
              "2     1         3    C  89.21      18  180.00      15    X        NaN   \n",
              "3     1         4    D  74.50      15  180.00      18    X        NaN   \n",
              "4     2         1    D  76.50      14  149.77      15    O          D   \n",
              "..  ...       ...  ...    ...     ...     ...     ...  ...        ...   \n",
              "59   31         4    C  63.30       2  127.40       2    O        NaN   \n",
              "60   32         1    C  63.20       2  121.30       3    O        NaN   \n",
              "61   32         2    A  65.20       3  125.20       3    O        NaN   \n",
              "62   32         3    D  67.10       2  124.20       4    O        NaN   \n",
              "63   32         4    B  63.20       1  120.10       1  NaN        NaN   \n",
              "\n",
              "   Unnamed: 9 condition  \n",
              "0           X       NaN  \n",
              "1         NaN       NaN  \n",
              "2         NaN       NaN  \n",
              "3         NaN       NaN  \n",
              "4           X       NaN  \n",
              "..        ...       ...  \n",
              "59        NaN       NaN  \n",
              "60        NaN         C  \n",
              "61        NaN       NaN  \n",
              "62        NaN       NaN  \n",
              "63        NaN       NaN  \n",
              "\n",
              "[128 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7f7f7f4d-6387-4ea9-a014-0ec4230ac38e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>num</th>\n",
              "      <th>prin_num</th>\n",
              "      <th>prin</th>\n",
              "      <th>lap_1</th>\n",
              "      <th>coll_1</th>\n",
              "      <th>lap_2</th>\n",
              "      <th>coll_2</th>\n",
              "      <th>if</th>\n",
              "      <th>Unnamed: 8</th>\n",
              "      <th>Unnamed: 9</th>\n",
              "      <th>condition</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>A</td>\n",
              "      <td>83.21</td>\n",
              "      <td>19</td>\n",
              "      <td>180.00</td>\n",
              "      <td>21</td>\n",
              "      <td>X</td>\n",
              "      <td>A</td>\n",
              "      <td>X</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>B</td>\n",
              "      <td>78.51</td>\n",
              "      <td>12</td>\n",
              "      <td>157.30</td>\n",
              "      <td>16</td>\n",
              "      <td>O</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>C</td>\n",
              "      <td>89.21</td>\n",
              "      <td>18</td>\n",
              "      <td>180.00</td>\n",
              "      <td>15</td>\n",
              "      <td>X</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>D</td>\n",
              "      <td>74.50</td>\n",
              "      <td>15</td>\n",
              "      <td>180.00</td>\n",
              "      <td>18</td>\n",
              "      <td>X</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>D</td>\n",
              "      <td>76.50</td>\n",
              "      <td>14</td>\n",
              "      <td>149.77</td>\n",
              "      <td>15</td>\n",
              "      <td>O</td>\n",
              "      <td>D</td>\n",
              "      <td>X</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59</th>\n",
              "      <td>31</td>\n",
              "      <td>4</td>\n",
              "      <td>C</td>\n",
              "      <td>63.30</td>\n",
              "      <td>2</td>\n",
              "      <td>127.40</td>\n",
              "      <td>2</td>\n",
              "      <td>O</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>60</th>\n",
              "      <td>32</td>\n",
              "      <td>1</td>\n",
              "      <td>C</td>\n",
              "      <td>63.20</td>\n",
              "      <td>2</td>\n",
              "      <td>121.30</td>\n",
              "      <td>3</td>\n",
              "      <td>O</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>61</th>\n",
              "      <td>32</td>\n",
              "      <td>2</td>\n",
              "      <td>A</td>\n",
              "      <td>65.20</td>\n",
              "      <td>3</td>\n",
              "      <td>125.20</td>\n",
              "      <td>3</td>\n",
              "      <td>O</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>62</th>\n",
              "      <td>32</td>\n",
              "      <td>3</td>\n",
              "      <td>D</td>\n",
              "      <td>67.10</td>\n",
              "      <td>2</td>\n",
              "      <td>124.20</td>\n",
              "      <td>4</td>\n",
              "      <td>O</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>63</th>\n",
              "      <td>32</td>\n",
              "      <td>4</td>\n",
              "      <td>B</td>\n",
              "      <td>63.20</td>\n",
              "      <td>1</td>\n",
              "      <td>120.10</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>128 rows × 11 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7f7f7f4d-6387-4ea9-a014-0ec4230ac38e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-7f7f7f4d-6387-4ea9-a014-0ec4230ac38e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-7f7f7f4d-6387-4ea9-a014-0ec4230ac38e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_a = data[data['prin'] == 'A']\n",
        "df_b = data[data['prin'] == 'B']\n",
        "df_c = data[data['prin'] == 'C']\n",
        "df_d = data[data['prin'] == 'D']"
      ],
      "metadata": {
        "id": "wyOPxUZlVMcM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "len(df_a['prin_num'])"
      ],
      "metadata": {
        "id": "YadgH5x8VMcM",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c69b3fc0-90ca-461c-bf77-99a8fee8e491"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "32"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "coll_a1 = df_a['coll_1']\n",
        "coll_b1 = df_b['coll_1']\n",
        "coll_c1 = df_c['coll_1']\n",
        "coll_d1 = df_d['coll_1']"
      ],
      "metadata": {
        "id": "o8fVY3XYVMcN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "coll_a2 = df_a['coll_2']\n",
        "coll_b2 = df_b['coll_2']\n",
        "coll_c2 = df_c['coll_2']\n",
        "coll_d2 = df_d['coll_2']"
      ],
      "metadata": {
        "id": "8uUieKXiVMcN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "lap_a1 = df_a['lap_1']\n",
        "lap_b1 = df_b['lap_1']\n",
        "lap_c1 = df_c['lap_1']\n",
        "lap_d1 = df_d['lap_1']"
      ],
      "metadata": {
        "id": "O8RRx4FSVMcN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "lap_a2 = df_a['lap_2']\n",
        "lap_b2 = df_b['lap_2']\n",
        "lap_c2 = df_c['lap_2']\n",
        "lap_d2 = df_d['lap_2']"
      ],
      "metadata": {
        "id": "RS7uaKq4VMcN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import scipy.stats as stats\n",
        "import pandas as pd\n",
        "import urllib\n",
        "from statsmodels.formula.api import ols\n",
        "from statsmodels.stats.anova import anova_lm\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "%matplotlib inline"
      ],
      "metadata": {
        "id": "pdg93pqPVMcO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 정제\n",
        " \n",
        " 이 맵의 역대 최단 주행 시간은 1:42:07. 이는 한 번의 실수도 없이 이 맵을 인-아웃 등 여러 요소를 고려해 이끌어낼 수 있는 최단 시간. \n",
        " \n",
        " 즉, 이 시간은 이 맵을 주행하는 데 있어 필수불가결한 시간. 제하고 생각하는 것이 바람직하다."
      ],
      "metadata": {
        "id": "UZfp2li8VMcO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "lap_a2 = lap_a2 - 102.07\n",
        "lap_b2 = lap_b2 - 102.07\n",
        "lap_c2 = lap_c2 - 102.07\n",
        "lap_d2 = lap_d2 - 102.07"
      ],
      "metadata": {
        "id": "iowm94EyVMcO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "lap_a2"
      ],
      "metadata": {
        "id": "pVuRnvicVMcP",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fbf8d88e-b9f5-487c-9b9c-234076b91880"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0     77.93\n",
              "6     44.78\n",
              "8     45.03\n",
              "12    37.18\n",
              "17    43.82\n",
              "21    37.18\n",
              "27    36.73\n",
              "30    36.43\n",
              "34    39.91\n",
              "37    41.70\n",
              "42    77.93\n",
              "45    39.65\n",
              "50    35.33\n",
              "52    36.33\n",
              "56    49.13\n",
              "60    47.93\n",
              "1     29.04\n",
              "6     29.79\n",
              "10    23.60\n",
              "14    27.22\n",
              "16    39.28\n",
              "20    50.69\n",
              "27     4.71\n",
              "29    26.12\n",
              "33    19.73\n",
              "36    15.03\n",
              "40    37.05\n",
              "47    24.23\n",
              "48    15.53\n",
              "53    21.43\n",
              "58    29.13\n",
              "61    23.13\n",
              "Name: lap_2, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##시각화"
      ],
      "metadata": {
        "id": "h2csZDx4VMcP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "lap_b1"
      ],
      "metadata": {
        "id": "C38q-cK2VMcP",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "128ac3e1-fcf6-49e7-96fd-76af6d6e5e3f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1     78.51\n",
              "7     76.42\n",
              "9     72.98\n",
              "14    72.62\n",
              "16    76.17\n",
              "23    68.29\n",
              "25    69.48\n",
              "31    85.20\n",
              "32    75.78\n",
              "39    72.30\n",
              "41    99.99\n",
              "47    67.29\n",
              "48    72.18\n",
              "53    73.70\n",
              "58    84.30\n",
              "63    77.00\n",
              "3     62.59\n",
              "7     66.20\n",
              "8     68.73\n",
              "15    65.27\n",
              "19    71.16\n",
              "22    75.30\n",
              "24    59.33\n",
              "31    68.59\n",
              "35    63.10\n",
              "38    61.20\n",
              "42    71.39\n",
              "44    63.20\n",
              "49    62.30\n",
              "52    63.20\n",
              "56    64.40\n",
              "63    63.20\n",
              "Name: lap_1, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plot_data = [lap_a1, lap_b1, lap_c1, lap_d1]\n",
        "ax = plt.boxplot(plot_data)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "q2hyTy7CVMcP",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "outputId": "05c581a7-928c-459b-ab2d-785892c08a3b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plot_data = [lap_a2, lap_b2, lap_c2, lap_d2]\n",
        "ax = plt.boxplot(plot_data)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "KEa-3GhCVMcQ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "outputId": "0a959a3c-dd02-42b0-b27b-a48f44f1b50d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "coll_a2"
      ],
      "metadata": {
        "id": "R07RMx-QVMcQ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "988e4e5a-dab6-4ed4-8c74-3c167d291957"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0     21\n",
              "6     18\n",
              "8     14\n",
              "12     7\n",
              "17     7\n",
              "21     9\n",
              "27     5\n",
              "30     9\n",
              "34    14\n",
              "37     9\n",
              "42    13\n",
              "45    10\n",
              "50     6\n",
              "52    10\n",
              "56     9\n",
              "60     9\n",
              "1      3\n",
              "6      3\n",
              "10     2\n",
              "14     7\n",
              "16    10\n",
              "20    13\n",
              "27     0\n",
              "29     6\n",
              "33     0\n",
              "36     1\n",
              "40    10\n",
              "47     4\n",
              "48     2\n",
              "53     2\n",
              "58     3\n",
              "61     3\n",
              "Name: coll_2, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plot_data = [coll_a1, coll_b1, coll_c1, coll_d1]\n",
        "ax = plt.boxplot(plot_data)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "lVCcZka_VMcQ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 268
        },
        "outputId": "c07153ac-69e1-44ed-ef46-91495ef6da53"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plot_data = [coll_a2, coll_b2, coll_c2, coll_d2]\n",
        "ax = plt.boxplot(plot_data)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "7w-y9RNzVMcR",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "outputId": "4522fde5-1bfc-4820-f3f1-8e3330dcda88"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###일원분산분석"
      ],
      "metadata": {
        "id": "2_d2pb9ZVMcR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "F_statistic, pVal = stats.f_oneway(lap_a1, lap_b1, lap_c1, lap_d1)\n",
        "print('카트라이더 데이터의 일원분산분석 결과 : F={0:.1f}, p={1:.5f}'.format(F_statistic, pVal))\n",
        "if pVal < 0.05:\n",
        "    print('P-value 값이 충분히 작음으로 인해 그룹의 평균값이 통계적으로 유의미하게 차이납니다.')"
      ],
      "metadata": {
        "id": "v0IfYPPTVMcS",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f39c616f-0425-47fd-a824-0213905b704b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "카트라이더 데이터의 일원분산분석 결과 : F=0.3, p=0.84290\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "F_statistic, pVal = stats.f_oneway(coll_a1, coll_b1, coll_c1, coll_d1)\n",
        "print('카트라이더 데이터의 일원분산분석 결과 : F={0:.1f}, p={1:.5f}'.format(F_statistic, pVal))\n",
        "if pVal < 0.05:\n",
        "    print('P-value 값이 충분히 작음으로 인해 그룹의 평균값이 통계적으로 유의미하게 차이납니다.')"
      ],
      "metadata": {
        "id": "WltmJVlzVMcS",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "84fea2ce-3b12-48a6-a5f8-6a8f6f4bf967"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "카트라이더 데이터의 일원분산분석 결과 : F=0.0, p=0.99011\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "F_statistic, pVal = stats.f_oneway(lap_a2, lap_b2, lap_c2, lap_d2)\n",
        "print('카트라이더 데이터의 일원분산분석 결과 : F={0:.1f}, p={1:.5f}'.format(F_statistic, pVal))\n",
        "if pVal < 0.05:\n",
        "    print('P-value 값이 충분히 작음으로 인해 그룹의 평균값이 통계적으로 유의미하게 차이납니다.')"
      ],
      "metadata": {
        "id": "-LxnEaCSVMcT",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "75b72d87-d6ce-421d-adff-67c681c6a756"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "카트라이더 데이터의 일원분산분석 결과 : F=0.0, p=0.99849\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "F_statistic, pVal = stats.f_oneway(coll_a2, coll_b2, coll_c2, coll_d2)\n",
        "print('카트라이더 데이터의 일원분산분석 결과 : F={0:.1f}, p={1:.5f}'.format(F_statistic, pVal))\n",
        "if pVal < 0.05:\n",
        "    print('P-value 값이 충분히 작음으로 인해 그룹의 평균값이 통계적으로 유의미하게 차이납니다.')"
      ],
      "metadata": {
        "id": "0LdIO4exVMcT",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ccef55da-7831-45f7-b031-bf31a9b0fd5b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "카트라이더 데이터의 일원분산분석 결과 : F=0.2, p=0.86996\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#히트맵\n"
      ],
      "metadata": {
        "id": "GE8n54Yd06tj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "import lightgbm as lgb\n",
        "import gc\n",
        "from sklearn.preprocessing import StandardScaler"
      ],
      "metadata": {
        "id": "LG5KdDmS0-X3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df2 = data[['lap_1','coll_1','lap_2','coll_2','prin','if']]"
      ],
      "metadata": {
        "id": "aSQs28TP3Sck"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df2.fillna('O',inplace =True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ioA6UYXn3kFC",
        "outputId": "f59cfc10-5fdb-4066-e234-53a3a87792e0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.8/dist-packages/pandas/core/frame.py:5176: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  return super().fillna(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = data[['lap_1','coll_1','lap_2','coll_2','prin','if']]"
      ],
      "metadata": {
        "id": "H2fnPa1v1VPd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "V0sWJ_fFuqvi",
        "outputId": "253c480d-ac3f-4a7d-a6dc-2c00ca2e95f3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    lap_1  coll_1   lap_2  coll_2 prin   if\n",
              "0   83.21      19  180.00      21    A    X\n",
              "1   78.51      12  157.30      16    B    O\n",
              "2   89.21      18  180.00      15    C    X\n",
              "3   74.50      15  180.00      18    D    X\n",
              "4   76.50      14  149.77      15    D    O\n",
              "..    ...     ...     ...     ...  ...  ...\n",
              "59  63.30       2  127.40       2    C    O\n",
              "60  63.20       2  121.30       3    C    O\n",
              "61  65.20       3  125.20       3    A    O\n",
              "62  67.10       2  124.20       4    D    O\n",
              "63  63.20       1  120.10       1    B  NaN\n",
              "\n",
              "[128 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-24857ca3-c4ce-4b13-9491-0bb803710a18\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>lap_1</th>\n",
              "      <th>coll_1</th>\n",
              "      <th>lap_2</th>\n",
              "      <th>coll_2</th>\n",
              "      <th>prin</th>\n",
              "      <th>if</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>83.21</td>\n",
              "      <td>19</td>\n",
              "      <td>180.00</td>\n",
              "      <td>21</td>\n",
              "      <td>A</td>\n",
              "      <td>X</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>78.51</td>\n",
              "      <td>12</td>\n",
              "      <td>157.30</td>\n",
              "      <td>16</td>\n",
              "      <td>B</td>\n",
              "      <td>O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>89.21</td>\n",
              "      <td>18</td>\n",
              "      <td>180.00</td>\n",
              "      <td>15</td>\n",
              "      <td>C</td>\n",
              "      <td>X</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>74.50</td>\n",
              "      <td>15</td>\n",
              "      <td>180.00</td>\n",
              "      <td>18</td>\n",
              "      <td>D</td>\n",
              "      <td>X</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>76.50</td>\n",
              "      <td>14</td>\n",
              "      <td>149.77</td>\n",
              "      <td>15</td>\n",
              "      <td>D</td>\n",
              "      <td>O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59</th>\n",
              "      <td>63.30</td>\n",
              "      <td>2</td>\n",
              "      <td>127.40</td>\n",
              "      <td>2</td>\n",
              "      <td>C</td>\n",
              "      <td>O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>60</th>\n",
              "      <td>63.20</td>\n",
              "      <td>2</td>\n",
              "      <td>121.30</td>\n",
              "      <td>3</td>\n",
              "      <td>C</td>\n",
              "      <td>O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>61</th>\n",
              "      <td>65.20</td>\n",
              "      <td>3</td>\n",
              "      <td>125.20</td>\n",
              "      <td>3</td>\n",
              "      <td>A</td>\n",
              "      <td>O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>62</th>\n",
              "      <td>67.10</td>\n",
              "      <td>2</td>\n",
              "      <td>124.20</td>\n",
              "      <td>4</td>\n",
              "      <td>D</td>\n",
              "      <td>O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>63</th>\n",
              "      <td>63.20</td>\n",
              "      <td>1</td>\n",
              "      <td>120.10</td>\n",
              "      <td>1</td>\n",
              "      <td>B</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>128 rows × 6 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-24857ca3-c4ce-4b13-9491-0bb803710a18')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-24857ca3-c4ce-4b13-9491-0bb803710a18 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-24857ca3-c4ce-4b13-9491-0bb803710a18');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize = (14,7))\n",
        "sns.heatmap(df2.corr(), annot = True)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 450
        },
        "id": "qXOGQEvn1Kte",
        "outputId": "fe79aab7-0cd2-4f5b-e53f-4f53b51b9345"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fce9997fe20>"
            ]
          },
          "metadata": {},
          "execution_count": 36
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1008x504 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#라벨 인코딩 + forest/lgbm?"
      ],
      "metadata": {
        "id": "M9cJVHoE25VH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "D82xKAHn4CcP",
        "outputId": "65defc60-0964-4dbe-8d8c-5355a2d7232a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    lap_1  coll_1   lap_2  coll_2  prin  if\n",
              "0   83.21      19  180.00      21     0   1\n",
              "1   78.51      12  157.30      16     1   0\n",
              "2   89.21      18  180.00      15     2   1\n",
              "3   74.50      15  180.00      18     3   1\n",
              "4   76.50      14  149.77      15     3   0\n",
              "..    ...     ...     ...     ...   ...  ..\n",
              "59  63.30       2  127.40       2     2   0\n",
              "60  63.20       2  121.30       3     2   0\n",
              "61  65.20       3  125.20       3     0   0\n",
              "62  67.10       2  124.20       4     3   0\n",
              "63  63.20       1  120.10       1     1   0\n",
              "\n",
              "[128 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5181fd7d-ea15-409e-bdbe-06ee298ce214\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>lap_1</th>\n",
              "      <th>coll_1</th>\n",
              "      <th>lap_2</th>\n",
              "      <th>coll_2</th>\n",
              "      <th>prin</th>\n",
              "      <th>if</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>83.21</td>\n",
              "      <td>19</td>\n",
              "      <td>180.00</td>\n",
              "      <td>21</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>78.51</td>\n",
              "      <td>12</td>\n",
              "      <td>157.30</td>\n",
              "      <td>16</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>89.21</td>\n",
              "      <td>18</td>\n",
              "      <td>180.00</td>\n",
              "      <td>15</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>74.50</td>\n",
              "      <td>15</td>\n",
              "      <td>180.00</td>\n",
              "      <td>18</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>76.50</td>\n",
              "      <td>14</td>\n",
              "      <td>149.77</td>\n",
              "      <td>15</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59</th>\n",
              "      <td>63.30</td>\n",
              "      <td>2</td>\n",
              "      <td>127.40</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>60</th>\n",
              "      <td>63.20</td>\n",
              "      <td>2</td>\n",
              "      <td>121.30</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>61</th>\n",
              "      <td>65.20</td>\n",
              "      <td>3</td>\n",
              "      <td>125.20</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>62</th>\n",
              "      <td>67.10</td>\n",
              "      <td>2</td>\n",
              "      <td>124.20</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>63</th>\n",
              "      <td>63.20</td>\n",
              "      <td>1</td>\n",
              "      <td>120.10</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>128 rows × 6 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5181fd7d-ea15-409e-bdbe-06ee298ce214')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-5181fd7d-ea15-409e-bdbe-06ee298ce214 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-5181fd7d-ea15-409e-bdbe-06ee298ce214');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df2.groupby('prin').agg(len)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "0QBesT3WzdYu",
        "outputId": "4d73a867-fd1b-4bd0-e77e-a6e7c346e770"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      lap_1  coll_1  lap_2  coll_2  if\n",
              "prin                                  \n",
              "0        32      32     32      32  32\n",
              "1        32      32     32      32  32\n",
              "2        32      32     32      32  32\n",
              "3        32      32     32      32  32"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-68df63d9-eb74-47d3-bc68-900124f5a987\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>lap_1</th>\n",
              "      <th>coll_1</th>\n",
              "      <th>lap_2</th>\n",
              "      <th>coll_2</th>\n",
              "      <th>if</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>prin</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>32</td>\n",
              "      <td>32</td>\n",
              "      <td>32</td>\n",
              "      <td>32</td>\n",
              "      <td>32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>32</td>\n",
              "      <td>32</td>\n",
              "      <td>32</td>\n",
              "      <td>32</td>\n",
              "      <td>32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>32</td>\n",
              "      <td>32</td>\n",
              "      <td>32</td>\n",
              "      <td>32</td>\n",
              "      <td>32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>32</td>\n",
              "      <td>32</td>\n",
              "      <td>32</td>\n",
              "      <td>32</td>\n",
              "      <td>32</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-68df63d9-eb74-47d3-bc68-900124f5a987')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-68df63d9-eb74-47d3-bc68-900124f5a987 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-68df63d9-eb74-47d3-bc68-900124f5a987');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df2['prin'][2]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qXRrVdv41D2Y",
        "outputId": "e1a84d71-edcf-42e5-e060-ca06fc4f30da"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2    2\n",
              "2    3\n",
              "Name: prin, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df2['prin']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Eoq-uy2X1-y4",
        "outputId": "b8f31dcb-b6e9-4d38-e822-6a197bb42902"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0     0\n",
              "1     1\n",
              "2     2\n",
              "3     3\n",
              "4     3\n",
              "     ..\n",
              "59    2\n",
              "60    2\n",
              "61    0\n",
              "62    3\n",
              "63    1\n",
              "Name: prin, Length: 128, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df2['blur'] = 0\n",
        "df2['line'] = 0"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DI23vae831qr",
        "outputId": "af648593-c947-45bf-870e-ba428990a3d1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-66-1e6c63841c6c>:1: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df2['blur'] = 0\n",
            "<ipython-input-66-1e6c63841c6c>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df2['line'] = 0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for i, val in enumerate(df2['prin']) :\n",
        "  if  (val == 0) or (val == 1) :\n",
        "    df2['blur'][i]= 0\n",
        "  else :\n",
        "    df2['blur'][i] = 1"
      ],
      "metadata": {
        "id": "ZcT-kN8Hz6Rb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for i, val in enumerate(df2['prin']) :\n",
        "  if  (val == 0) or (val == 2) :\n",
        "    df2['line'][i]= 0\n",
        "  else :\n",
        "    df2['line'][i]= 1"
      ],
      "metadata": {
        "id": "VCm7HvN639MH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df2['blur'].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JYl7l0IM3cZ6",
        "outputId": "5ff1652a-e24a-4925-d528-11e096809fa1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 1])"
            ]
          },
          "metadata": {},
          "execution_count": 64
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "str_col = ['prin','if']\n",
        "\n",
        "for i in str_col:\n",
        "    le = LabelEncoder()\n",
        "    le=le.fit(df2[i])\n",
        "    df2[i]=le.transform(df2[i])\n",
        "    \n",
        "    for label in np.unique(df2[i]):\n",
        "        if label not in le.classes_: \n",
        "            le.classes_ = np.append(le.classes_, label)\n",
        "    df2[i]=le.transform(df2[i])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 609
        },
        "id": "p1GctKBZ2jQp",
        "outputId": "20ca8fc1-814a-4667-ac81-5208ee200ce9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-31-6162313f3aa5>:6: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df2[i]=le.transform(df2[i])\n",
            "<ipython-input-31-6162313f3aa5>:11: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df2[i]=le.transform(df2[i])\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-31-6162313f3aa5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      9\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlabel\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclasses_\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m             \u001b[0mle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclasses_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclasses_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m     \u001b[0mdf2\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf2\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/sklearn/preprocessing/_label.py\u001b[0m in \u001b[0;36mtransform\u001b[0;34m(self, y)\u001b[0m\n\u001b[1;32m    136\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    137\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 138\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0m_encode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0muniques\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclasses_\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    139\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    140\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0minverse_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/sklearn/utils/_encode.py\u001b[0m in \u001b[0;36m_encode\u001b[0;34m(values, uniques, check_unknown)\u001b[0m\n\u001b[1;32m    185\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    186\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcheck_unknown\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 187\u001b[0;31m             \u001b[0mdiff\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_check_unknown\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0muniques\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    188\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mdiff\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    189\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"y contains previously unseen labels: {str(diff)}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/sklearn/utils/_encode.py\u001b[0m in \u001b[0;36m_check_unknown\u001b[0;34m(values, known_values, return_mask)\u001b[0m\n\u001b[1;32m    259\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    260\u001b[0m         \u001b[0;31m# check for nans in the known_values\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 261\u001b[0;31m         \u001b[0;32mif\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misnan\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mknown_values\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0many\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    262\u001b[0m             \u001b[0mdiff_is_nan\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misnan\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdiff\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    263\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mdiff_is_nan\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0many\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTypeError\u001b[0m: ufunc 'isnan' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "def getDf(data):\n",
        "  X_data = data[data.drop(['prin'],axis=1).columns]\n",
        "  y_data = data[['prin']]\n",
        "  #정규화\n",
        "  ss = StandardScaler()\n",
        "  X_scaled = ss.fit_transform(X_data)\n",
        "  y_scaled = ss.fit_transform(y_data)\n",
        "  x_train, x_test, y_train, y_test = train_test_split(X_scaled, y_scaled, test_size=0.3,shuffle=True)\n",
        "  # 학습 진행\n",
        "  forest = RandomForestRegressor(n_estimators=100)\n",
        "  forest.fit(x_train, y_train)\n",
        "\n",
        "  return list(forest.feature_importances_)"
      ],
      "metadata": {
        "id": "161rN4pP8k5x"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "L0bJyYVq-71j",
        "outputId": "0df17b9b-c2b0-4f8d-ada4-54a1c235be90"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    lap_1  coll_1   lap_2  coll_2  prin  if\n",
              "0   83.21      19  180.00      21     0   1\n",
              "1   78.51      12  157.30      16     1   0\n",
              "2   89.21      18  180.00      15     2   1\n",
              "3   74.50      15  180.00      18     3   1\n",
              "4   76.50      14  149.77      15     3   0\n",
              "..    ...     ...     ...     ...   ...  ..\n",
              "59  63.30       2  127.40       2     2   0\n",
              "60  63.20       2  121.30       3     2   0\n",
              "61  65.20       3  125.20       3     0   0\n",
              "62  67.10       2  124.20       4     3   0\n",
              "63  63.20       1  120.10       1     1   0\n",
              "\n",
              "[192 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-45b047f9-90d5-4855-ac09-616f37677cad\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>lap_1</th>\n",
              "      <th>coll_1</th>\n",
              "      <th>lap_2</th>\n",
              "      <th>coll_2</th>\n",
              "      <th>prin</th>\n",
              "      <th>if</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>83.21</td>\n",
              "      <td>19</td>\n",
              "      <td>180.00</td>\n",
              "      <td>21</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>78.51</td>\n",
              "      <td>12</td>\n",
              "      <td>157.30</td>\n",
              "      <td>16</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>89.21</td>\n",
              "      <td>18</td>\n",
              "      <td>180.00</td>\n",
              "      <td>15</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>74.50</td>\n",
              "      <td>15</td>\n",
              "      <td>180.00</td>\n",
              "      <td>18</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>76.50</td>\n",
              "      <td>14</td>\n",
              "      <td>149.77</td>\n",
              "      <td>15</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59</th>\n",
              "      <td>63.30</td>\n",
              "      <td>2</td>\n",
              "      <td>127.40</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>60</th>\n",
              "      <td>63.20</td>\n",
              "      <td>2</td>\n",
              "      <td>121.30</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>61</th>\n",
              "      <td>65.20</td>\n",
              "      <td>3</td>\n",
              "      <td>125.20</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>62</th>\n",
              "      <td>67.10</td>\n",
              "      <td>2</td>\n",
              "      <td>124.20</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>63</th>\n",
              "      <td>63.20</td>\n",
              "      <td>1</td>\n",
              "      <td>120.10</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>192 rows × 6 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-45b047f9-90d5-4855-ac09-616f37677cad')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-45b047f9-90d5-4855-ac09-616f37677cad button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-45b047f9-90d5-4855-ac09-616f37677cad');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 204
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a = getDf(df2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MOADIvxN-Fj9",
        "outputId": "1a8e9989-4584-4fc0-b360-0e04ec3745a9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-209-00cba5647f3c>:14: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  forest.fit(x_train, y_train)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mtEe3A0e_teW",
        "outputId": "81de4c9b-dc06-4bc5-8539-25b68ffd5611"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.29246978071039587,\n",
              " 0.19631344489406136,\n",
              " 0.3155399525295324,\n",
              " 0.19478858069169622,\n",
              " 0.0008882411743142737]"
            ]
          },
          "metadata": {},
          "execution_count": 211
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#RF 피쳐 임포턴스 가장 높은 것은 lap2:\n",
        "\n",
        "주행조건에 최종 랩 시간이 가장 많이 좌우됨."
      ],
      "metadata": {
        "id": "gFsKUL3m_yqN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from scipy.stats import shapiro"
      ],
      "metadata": {
        "id": "qp9pcc6W6lo0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "shapiro(df2['lap_2'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dGokBFQv6vyu",
        "outputId": "a765f6e7-215a-4dd0-df7c-d057a19e16d1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "ShapiroResult(statistic=0.9384993314743042, pvalue=1.8934144463855773e-05)"
            ]
          },
          "metadata": {},
          "execution_count": 77
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df2.groupby(['line', 'blur']).agg(len)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "P_rl7zLB4H8u",
        "outputId": "e5ae581b-b4b9-46b9-9633-7fa7bbeb88f8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           lap_1  coll_1  lap_2  coll_2  prin  if\n",
              "line blur                                        \n",
              "0    0        32      32     32      32    32  32\n",
              "     1        32      32     32      32    32  32\n",
              "1    0        32      32     32      32    32  32\n",
              "     1        32      32     32      32    32  32"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1c383a41-eeee-4f32-afcb-6e7b5f38eba5\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th>lap_1</th>\n",
              "      <th>coll_1</th>\n",
              "      <th>lap_2</th>\n",
              "      <th>coll_2</th>\n",
              "      <th>prin</th>\n",
              "      <th>if</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>line</th>\n",
              "      <th>blur</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th rowspan=\"2\" valign=\"top\">0</th>\n",
              "      <th>0</th>\n",
              "      <td>32</td>\n",
              "      <td>32</td>\n",
              "      <td>32</td>\n",
              "      <td>32</td>\n",
              "      <td>32</td>\n",
              "      <td>32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>32</td>\n",
              "      <td>32</td>\n",
              "      <td>32</td>\n",
              "      <td>32</td>\n",
              "      <td>32</td>\n",
              "      <td>32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"2\" valign=\"top\">1</th>\n",
              "      <th>0</th>\n",
              "      <td>32</td>\n",
              "      <td>32</td>\n",
              "      <td>32</td>\n",
              "      <td>32</td>\n",
              "      <td>32</td>\n",
              "      <td>32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>32</td>\n",
              "      <td>32</td>\n",
              "      <td>32</td>\n",
              "      <td>32</td>\n",
              "      <td>32</td>\n",
              "      <td>32</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1c383a41-eeee-4f32-afcb-6e7b5f38eba5')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-1c383a41-eeee-4f32-afcb-6e7b5f38eba5 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-1c383a41-eeee-4f32-afcb-6e7b5f38eba5');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 69
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from statsmodels.formula.api import ols\n",
        "from statsmodels.stats.anova import anova_lm\n",
        "\n",
        "model = ols('coll_1 ~ C(line) * C(blur)', df2).fit()\n",
        "anova_lm(model)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "id": "b82rXuRw4VTw",
        "outputId": "c1a46ded-5e0a-46d1-bd0f-06e52c45ae48"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                    df       sum_sq    mean_sq         F    PR(>F)\n",
              "C(line)            1.0     2.820313   2.820313  0.124396  0.724914\n",
              "C(blur)            1.0     2.820312   2.820312  0.124396  0.724914\n",
              "C(line):C(blur)    1.0     9.570313   9.570313  0.422118  0.517084\n",
              "Residual         124.0  2811.343750  22.672127       NaN       NaN"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-964a9b8a-4012-4d87-8a56-3f14277bdbc9\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>df</th>\n",
              "      <th>sum_sq</th>\n",
              "      <th>mean_sq</th>\n",
              "      <th>F</th>\n",
              "      <th>PR(&gt;F)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>C(line)</th>\n",
              "      <td>1.0</td>\n",
              "      <td>2.820313</td>\n",
              "      <td>2.820313</td>\n",
              "      <td>0.124396</td>\n",
              "      <td>0.724914</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>C(blur)</th>\n",
              "      <td>1.0</td>\n",
              "      <td>2.820312</td>\n",
              "      <td>2.820312</td>\n",
              "      <td>0.124396</td>\n",
              "      <td>0.724914</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>C(line):C(blur)</th>\n",
              "      <td>1.0</td>\n",
              "      <td>9.570313</td>\n",
              "      <td>9.570313</td>\n",
              "      <td>0.422118</td>\n",
              "      <td>0.517084</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Residual</th>\n",
              "      <td>124.0</td>\n",
              "      <td>2811.343750</td>\n",
              "      <td>22.672127</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-964a9b8a-4012-4d87-8a56-3f14277bdbc9')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-964a9b8a-4012-4d87-8a56-3f14277bdbc9 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-964a9b8a-4012-4d87-8a56-3f14277bdbc9');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 72
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model = ols('coll_2 ~ C(line) * C(blur)', df2).fit()\n",
        "anova_lm(model)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "id": "roLcHde14r27",
        "outputId": "d827512c-932f-4c85-afc7-17e40e8c57ad"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                    df       sum_sq    mean_sq         F    PR(>F)\n",
              "C(line)            1.0     2.257812   2.257812  0.095629  0.757658\n",
              "C(blur)            1.0     0.070312   0.070312  0.002978  0.956568\n",
              "C(line):C(blur)    1.0     4.132812   4.132812  0.175044  0.676391\n",
              "Residual         124.0  2927.656250  23.610131       NaN       NaN"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-26bd25fc-a2d0-47e9-8f99-1c5e01e09d6a\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>df</th>\n",
              "      <th>sum_sq</th>\n",
              "      <th>mean_sq</th>\n",
              "      <th>F</th>\n",
              "      <th>PR(&gt;F)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>C(line)</th>\n",
              "      <td>1.0</td>\n",
              "      <td>2.257812</td>\n",
              "      <td>2.257812</td>\n",
              "      <td>0.095629</td>\n",
              "      <td>0.757658</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>C(blur)</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.070312</td>\n",
              "      <td>0.070312</td>\n",
              "      <td>0.002978</td>\n",
              "      <td>0.956568</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>C(line):C(blur)</th>\n",
              "      <td>1.0</td>\n",
              "      <td>4.132812</td>\n",
              "      <td>4.132812</td>\n",
              "      <td>0.175044</td>\n",
              "      <td>0.676391</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Residual</th>\n",
              "      <td>124.0</td>\n",
              "      <td>2927.656250</td>\n",
              "      <td>23.610131</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-26bd25fc-a2d0-47e9-8f99-1c5e01e09d6a')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-26bd25fc-a2d0-47e9-8f99-1c5e01e09d6a button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-26bd25fc-a2d0-47e9-8f99-1c5e01e09d6a');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 73
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model = ols('lap_1 ~ C(line) * C(blur)', df2).fit()\n",
        "anova_lm(model)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "id": "pRL9fDVb4uJ3",
        "outputId": "5562ba42-5c85-40ad-f4d5-60addd050fa4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                    df       sum_sq    mean_sq         F    PR(>F)\n",
              "C(line)            1.0     9.806913   9.806913  0.146858  0.702213\n",
              "C(blur)            1.0    15.715020  15.715020  0.235331  0.628455\n",
              "C(line):C(blur)    1.0    12.518757  12.518757  0.187467  0.665785\n",
              "Residual         124.0  8280.519291  66.778381       NaN       NaN"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-32f173d2-6f85-43da-9b6f-57bf69281068\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>df</th>\n",
              "      <th>sum_sq</th>\n",
              "      <th>mean_sq</th>\n",
              "      <th>F</th>\n",
              "      <th>PR(&gt;F)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>C(line)</th>\n",
              "      <td>1.0</td>\n",
              "      <td>9.806913</td>\n",
              "      <td>9.806913</td>\n",
              "      <td>0.146858</td>\n",
              "      <td>0.702213</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>C(blur)</th>\n",
              "      <td>1.0</td>\n",
              "      <td>15.715020</td>\n",
              "      <td>15.715020</td>\n",
              "      <td>0.235331</td>\n",
              "      <td>0.628455</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>C(line):C(blur)</th>\n",
              "      <td>1.0</td>\n",
              "      <td>12.518757</td>\n",
              "      <td>12.518757</td>\n",
              "      <td>0.187467</td>\n",
              "      <td>0.665785</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Residual</th>\n",
              "      <td>124.0</td>\n",
              "      <td>8280.519291</td>\n",
              "      <td>66.778381</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-32f173d2-6f85-43da-9b6f-57bf69281068')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-32f173d2-6f85-43da-9b6f-57bf69281068 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-32f173d2-6f85-43da-9b6f-57bf69281068');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 74
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model = ols('lap_2 ~ C(line) * C(blur)', df2).fit()\n",
        "anova_lm(model)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "id": "pcCk0Z7o4wwR",
        "outputId": "801e7818-e3bb-4d05-9475-1ca237cb6226"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                    df        sum_sq     mean_sq         F    PR(>F)\n",
              "C(line)            1.0     10.840332   10.840332  0.049976  0.823473\n",
              "C(blur)            1.0     21.459438   21.459438  0.098933  0.753643\n",
              "C(line):C(blur)    1.0      0.084563    0.084563  0.000390  0.984279\n",
              "Residual         124.0  26896.809803  216.909756       NaN       NaN"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-37a985ec-62da-495d-aada-56ba3e97bd55\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>df</th>\n",
              "      <th>sum_sq</th>\n",
              "      <th>mean_sq</th>\n",
              "      <th>F</th>\n",
              "      <th>PR(&gt;F)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>C(line)</th>\n",
              "      <td>1.0</td>\n",
              "      <td>10.840332</td>\n",
              "      <td>10.840332</td>\n",
              "      <td>0.049976</td>\n",
              "      <td>0.823473</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>C(blur)</th>\n",
              "      <td>1.0</td>\n",
              "      <td>21.459438</td>\n",
              "      <td>21.459438</td>\n",
              "      <td>0.098933</td>\n",
              "      <td>0.753643</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>C(line):C(blur)</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.084563</td>\n",
              "      <td>0.084563</td>\n",
              "      <td>0.000390</td>\n",
              "      <td>0.984279</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Residual</th>\n",
              "      <td>124.0</td>\n",
              "      <td>26896.809803</td>\n",
              "      <td>216.909756</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-37a985ec-62da-495d-aada-56ba3e97bd55')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-37a985ec-62da-495d-aada-56ba3e97bd55 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-37a985ec-62da-495d-aada-56ba3e97bd55');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 75
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "\n",
        "sns.distplot(df2['lap_1'])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 352
        },
        "id": "BHdrgmpxQqKX",
        "outputId": "91dccff2-dc71-487b-b574-42d2960d02be"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.8/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "  warnings.warn(msg, FutureWarning)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f7906524100>"
            ]
          },
          "metadata": {},
          "execution_count": 10
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "sns.distplot(df2['lap_2'])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 352
        },
        "id": "TvSOwbmzQ6Fn",
        "outputId": "c4109343-1a06-47bd-ec7d-3bb20b29a1bb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.8/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "  warnings.warn(msg, FutureWarning)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f79065248e0>"
            ]
          },
          "metadata": {},
          "execution_count": 11
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "sns.distplot(df2['coll_1'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 352
        },
        "id": "-BNGaO7xQ-pu",
        "outputId": "4560084a-e114-4ed3-e942-5fdb7511a21e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.8/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "  warnings.warn(msg, FutureWarning)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f7903ed7160>"
            ]
          },
          "metadata": {},
          "execution_count": 12
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "sns.distplot(df2['coll_2'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 352
        },
        "id": "dwQqX47YRBOw",
        "outputId": "65b23ee6-d9f3-4ac2-a062-52be1392d01a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.8/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "  warnings.warn(msg, FutureWarning)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f7903e376d0>"
            ]
          },
          "metadata": {},
          "execution_count": 13
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_a = df2[df2['prin'] == 'A']\n",
        "df_b = df2[df2['prin'] == 'B']\n",
        "df_c = df2[df2['prin'] == 'C']\n",
        "df_d = df2[df2['prin'] == 'D']"
      ],
      "metadata": {
        "id": "WZBmg1K2WH3r"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from scipy import stats\n",
        "\n",
        "stats.shapiro(df_b['lap_2'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "n7qq5_l1W6IT",
        "outputId": "29fc721b-e23a-49c2-8681-502e8a794c20"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "ShapiroResult(statistic=0.9525463581085205, pvalue=0.17017725110054016)"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x = np.linspace(-10, 10, 1000)\n",
        "plt.plot(x, df_a, alpha=0.7, label=r'x~N(0, $1^2$)')\n",
        "plt.plot(x, df_b, alpha=0.7, label=r'x~N(1.5, $1.5^2$)')\n",
        "plt.plot(x, y3, alpha=0.7, label=r'x~N(3.0, $2.0^2$)')\n",
        "plt.plot(x, y3, alpha=0.7, label=r'x~N(3.0, $2.0^2$)')\n",
        "plt.xlabel('x')\n",
        "plt.ylabel('f(x)')\n",
        "plt.legend(bbox_to_anchor=(1.0, .2))\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "eV48UbQKWuNy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import scipy.stats as stats\n",
        "\n",
        "stats.probplot(df_b['lap_1'], plot=plt)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 503
        },
        "id": "Va4WFvC-RJ4b",
        "outputId": "f599cfe7-39bc-452e-ee87-56f76aaaba13"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((array([-2.02511189, -1.62590278, -1.38593914, -1.20666642, -1.05953591,\n",
              "         -0.93235918, -0.81872017, -0.71478609, -0.6180591 , -0.52680137,\n",
              "         -0.43973827, -0.35589149, -0.27447843, -0.19484777, -0.11643566,\n",
              "         -0.03873405,  0.03873405,  0.11643566,  0.19484777,  0.27447843,\n",
              "          0.35589149,  0.43973827,  0.52680137,  0.6180591 ,  0.71478609,\n",
              "          0.81872017,  0.93235918,  1.05953591,  1.20666642,  1.38593914,\n",
              "          1.62590278,  2.02511189]),\n",
              "  array([59.33, 61.2 , 62.3 , 62.59, 63.1 , 63.2 , 63.2 , 63.2 , 64.4 ,\n",
              "         65.27, 66.2 , 67.29, 68.29, 68.59, 68.73, 69.48, 71.16, 71.39,\n",
              "         72.18, 72.3 , 72.62, 72.98, 73.7 , 75.3 , 75.78, 76.17, 76.42,\n",
              "         77.  , 78.51, 84.3 , 85.2 , 99.99])),\n",
              " (8.191561525017631, 70.9803125, 0.9409099134583007))"
            ]
          },
          "metadata": {},
          "execution_count": 24
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "stats.probplot(df2['coll_1'], plot=plt)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 902
        },
        "id": "Wm4rEYyPROWo",
        "outputId": "a7c5b7b8-1aeb-4d92-c33e-803dcd5344db"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((array([-2.54906705, -2.22302209, -2.03555678, -1.90043961, -1.7931057 ,\n",
              "         -1.70316821, -1.62521307, -1.55604355, -1.49360723, -1.43650435,\n",
              "         -1.38373553, -1.33456115, -1.28841772, -1.24486559, -1.20355471,\n",
              "         -1.16420164, -1.12657343, -1.09047616, -1.05574656, -1.02224578,\n",
              "         -0.98985467, -0.95847016, -0.92800244, -0.89837272, -0.86951146,\n",
              "         -0.84135691, -0.81385402, -0.78695338, -0.76061053, -0.73478524,\n",
              "         -0.70944097, -0.68454443, -0.66006516, -0.6359752 , -0.61224881,\n",
              "         -0.58886219, -0.56579331, -0.54302169, -0.52052826, -0.49829517,\n",
              "         -0.47630573, -0.45454425, -0.43299594, -0.41164684, -0.39048376,\n",
              "         -0.36949415, -0.34866609, -0.32798821, -0.30744964, -0.28703996,\n",
              "         -0.26674917, -0.24656763, -0.22648602, -0.20649534, -0.18658685,\n",
              "         -0.16675205, -0.14698265, -0.12727052, -0.10760774, -0.08798647,\n",
              "         -0.06839902, -0.04883778, -0.02929521, -0.00976383,  0.00976383,\n",
              "          0.02929521,  0.04883778,  0.06839902,  0.08798647,  0.10760774,\n",
              "          0.12727052,  0.14698265,  0.16675205,  0.18658685,  0.20649534,\n",
              "          0.22648602,  0.24656763,  0.26674917,  0.28703996,  0.30744964,\n",
              "          0.32798821,  0.34866609,  0.36949415,  0.39048376,  0.41164684,\n",
              "          0.43299594,  0.45454425,  0.47630573,  0.49829517,  0.52052826,\n",
              "          0.54302169,  0.56579331,  0.58886219,  0.61224881,  0.6359752 ,\n",
              "          0.66006516,  0.68454443,  0.70944097,  0.73478524,  0.76061053,\n",
              "          0.78695338,  0.81385402,  0.84135691,  0.86951146,  0.89837272,\n",
              "          0.92800244,  0.95847016,  0.98985467,  1.02224578,  1.05574656,\n",
              "          1.09047616,  1.12657343,  1.16420164,  1.20355471,  1.24486559,\n",
              "          1.28841772,  1.33456115,  1.38373553,  1.43650435,  1.49360723,\n",
              "          1.55604355,  1.62521307,  1.70316821,  1.7931057 ,  1.90043961,\n",
              "          2.03555678,  2.22302209,  2.54906705]),\n",
              "  array([ 0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  2,\n",
              "          2,  2,  2,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,\n",
              "          4,  4,  4,  4,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  6,\n",
              "          6,  6,  6,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  8,\n",
              "          8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  9,  9,  9,  9,  9,\n",
              "          9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9, 10, 10, 10, 10,\n",
              "         11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 13, 13, 14, 14, 14, 14,\n",
              "         15, 15, 15, 17, 18, 19, 20, 22, 24])),\n",
              " (4.640292956074609, 7.3359375, 0.9713867132457019))"
            ]
          },
          "metadata": {},
          "execution_count": 15
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}